# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
#
# https://go.microsoft.com/fwlink/?LinkID=615561

# Builds the library and test suite using the MinGW compiler.

schedules:
  - cron: "0 6 * * *"
    displayName: 'Nightly build'
    branches:
      include:
        - main

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - '*.md'
      - LICENSE
      - '.github/**'
      - '.nuget/*'
      - build/*.cmd
      - build/OneFuzz*.json
      - build/*.props
      - build/*.ps1
      - build/*.targets
      - build/*.xvd

pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - '*.md'
      - LICENSE
      - '.github/**'
      - '.nuget/*'
      - build/*.cmd
      - build/OneFuzz*.json
      - build/*.props
      - build/*.ps1
      - build/*.targets
      - build/*.xvd
  drafts: false

resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/main
    - repository: vcpkgRepo
      name: Microsoft/vcpkg
      type: github
      endpoint: microsoft
      ref: refs/tags/$(VCPKG_TAG)
    - repository: testRepo
      name: walbourn/directxtk12test
      type: github
      endpoint: microsoft
      ref: refs/heads/main

name: $(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

pool:
  vmImage: windows-2022

variables:
  - group: dxtk-shared-variables
  - name: Codeql.Enabled
    value: false
  - name: VCPKG_ROOT
    value: '$(Build.SourcesDirectory)/vcpkg'
  - name: VCPKG_CMAKE_DIR
    value: '$(Build.SourcesDirectory)/vcpkg/scripts/buildsystems/vcpkg.cmake'
  - name: VCPKG_MANIFEST_DIR
    value: '$(Build.SourcesDirectory)/build'
  - name: DIRECTX_DXC_DIR
    value: '$(Build.SourcesDirectory)/vcpkg/installed/x64-mingw-static/tools/directx-dxc'
  - name: WIN11_SDK
    value: '10.0.22000.0'
  - name: BASE_URL
    value: https://github.com/brechtsanders/winlibs_mingw/releases/download
  - name: URL_MINGW32
    value: $(BASE_URL)/12.2.0-14.0.6-10.0.0-ucrt-r2/winlibs-i686-posix-dwarf-gcc-12.2.0-llvm-14.0.6-mingw-w64ucrt-10.0.0-r2.zip
  - name: HASH_MINGW32
    value: 'fcd1e11b896190da01c83d5b5fb0d37b7c61585e53446c2dab0009debc3915e757213882c35e35396329338de6f0222ba012e23a5af86932db45186a225d1272'

jobs:
  - job: MINGW32_BUILD
    displayName: 'Minimalist GNU for Windows (MinGW32) BUILD_TESTING=ON'
    steps:
      - checkout: self
        clean: true
        fetchTags: false
        fetchDepth: 1
        path: 's'
      - checkout: vcpkgRepo
        displayName: Fetch VCPKG
        clean: true
        fetchTags: false
        fetchDepth: 1
        path: 's/vcpkg'
      - task: CmdLine@2
        # Note we have to use x64-mingw-static for the host to use the directx-dxc port.
        displayName: VCPKG Bootstrap
        inputs:
          script: |
            call bootstrap-vcpkg.bat
            echo ##vso[task.setvariable variable=VCPKG_DEFAULT_TRIPLET;]x86-mingw-static
            echo ##vso[task.setvariable variable=VCPKG_DEFAULT_HOST_TRIPLET;]x64-mingw-static

          workingDirectory: $(Build.SourcesDirectory)\vcpkg
      - task: PowerShell@2
        displayName: Install MinGW32
        inputs:
          targetType: inline
          script: |
            $ProgressPreference = 'SilentlyContinue'
            Write-Host "Downloading winlibs..."
            Invoke-WebRequest -Uri "$(URL_MINGW32)" -OutFile "gw32.zip"
            Write-Host "Downloaded."
            $fileHash = Get-FileHash -Algorithm SHA512 gw32.zip | ForEach { $_.Hash} | Out-String
            $filehash = $fileHash.Trim()
            Write-Host "##[debug]SHA512: " $fileHash
            if ($fileHash -ne '$(HASH_MINGW32)') {
                Write-Error -Message "##[error]Computed hash does not match!" -ErrorAction Stop
            }
            Write-Host "Extracting winlibs..."
            Expand-Archive -LiteralPath 'gw32.zip'
            Write-Host "Extracted."
            Write-Host "Added to path: $env:BUILD_SOURCESDIRECTORY\gw32\mingw32\bin"
            Write-Host "##vso[task.prependpath]$env:BUILD_SOURCESDIRECTORY\gw32\mingw32\bin"

          workingDirectory: $(Build.SourcesDirectory)
      - task: PowerShell@2
        displayName: Setup for Windows 11 SDK
        inputs:
          targetType: inline
          script: |
            $sdkroot = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots' | Select-Object -ExpandProperty KitsRoot10
            $wsdkarchlib = "{0}lib\$(WIN11_SDK)\um\x86" -f $sdkroot
            if (Test-Path "$wsdkarchlib") {
                Write-Host "##vso[task.setvariable variable=WindowsSdkDir;]$sdkroot"
                Write-Host "##vso[task.setvariable variable=LIB;]$wsdkarchlib"
            }
            else {
                Write-Error -Message "##[error]Can't find Windows SDK ($(WIN11_SDK))" -ErrorAction Stop
            }

          workingDirectory: $(Build.SourcesDirectory)
      - task: CmdLine@2
        displayName: GCC version
        inputs:
          script: g++ --version
      - task: CmdLine@2
        displayName: VCPKG install packages
        inputs:
          script: call vcpkg install --x-manifest-root=$(VCPKG_MANIFEST_DIR) --triplet=x86-mingw-static
          workingDirectory: $(VCPKG_ROOT)
      - task: CMake@1
        displayName: CMake (MinGW32)
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: >
            -B out -DCMAKE_BUILD_TYPE="Debug" -DDIRECTX_ARCH=x86 -DBUILD_XAUDIO_REDIST=ON
            -DCMAKE_CXX_COMPILER="g++.exe" -G "MinGW Makefiles"
            -DCMAKE_TOOLCHAIN_FILE="$(VCPKG_CMAKE_DIR)" -DVCPKG_MANIFEST_DIR="$(VCPKG_MANIFEST_DIR)"
            -DVCPKG_TARGET_TRIPLET=x86-mingw-static
            -DVCPKG_HOST_TRIPLET=x64-mingw-static -DDIRECTX_DXC_PATH="$(DIRECTX_DXC_DIR)"
      - task: CMake@1
        displayName: CMake (MinGW32) Build
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: --build out

  - job: MINGW64_BUILD
    displayName: 'Minimalist GNU for Windows (MinGW-W64) BUILD_TESTING=ON'
    steps:
      - checkout: self
        clean: true
        fetchTags: false
        fetchDepth: 1
        path: 's'
      - checkout: vcpkgRepo
        displayName: Fetch VCPKG
        clean: true
        fetchTags: false
        fetchDepth: 1
        path: 's/vcpkg'
      - checkout: testRepo
        displayName: Fetch Tests
        clean: true
        fetchTags: false
        fetchDepth: 1
        path: 's/Tests'
      - task: CmdLine@2
        displayName: VCPKG Bootstrap
        inputs:
          script: |
            call bootstrap-vcpkg.bat
            echo ##vso[task.setvariable variable=VCPKG_DEFAULT_TRIPLET;]x64-mingw-static
            echo ##vso[task.setvariable variable=VCPKG_DEFAULT_HOST_TRIPLET;]x64-mingw-static

          workingDirectory: $(Build.SourcesDirectory)\vcpkg
      - task: PowerShell@2
        displayName: Setup for Windows 11 SDK
        inputs:
          targetType: inline
          script: |
            $sdkroot = Get-ItemProperty -Path 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows Kits\Installed Roots' | Select-Object -ExpandProperty KitsRoot10
            $wsdkarchlib = "{0}lib\$(WIN11_SDK)\um\x64" -f $sdkroot
            if (Test-Path "$wsdkarchlib") {
                Write-Host "##vso[task.setvariable variable=WindowsSdkDir;]$sdkroot"
                Write-Host "##vso[task.setvariable variable=LIB;]$wsdkarchlib"
            }
            else {
                Write-Error -Message "##[error]Can't find Windows SDK ($(WIN11_SDK))" -ErrorAction Stop
            }

          workingDirectory: $(Build.SourcesDirectory)
      - task: CmdLine@2
        displayName: GCC version
        inputs:
          script: g++ --version
      - task: CmdLine@2
        displayName: VCPKG install packages
        inputs:
          script: call vcpkg install --x-manifest-root=$(VCPKG_MANIFEST_DIR) --triplet=x64-mingw-static
          workingDirectory: $(VCPKG_ROOT)
      - task: CMake@1
        displayName: CMake (MinGW-W64)
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: >
            -B out -DCMAKE_BUILD_TYPE="Debug" -DDIRECTX_ARCH=x64 -DBUILD_XAUDIO_REDIST=ON
            -DCMAKE_CXX_COMPILER="g++.exe" -G "MinGW Makefiles"
            -DCMAKE_TOOLCHAIN_FILE="$(VCPKG_CMAKE_DIR)" -DVCPKG_MANIFEST_DIR="$(VCPKG_MANIFEST_DIR)"
            -DVCPKG_TARGET_TRIPLET=x64-mingw-static
            -DVCPKG_HOST_TRIPLET=x64-mingw-static -DDIRECTX_DXC_PATH="$(DIRECTX_DXC_DIR)"
      - task: CMake@1
        displayName: CMake (MinGW-W64) Build
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: --build out
      - task: CMake@1
        displayName: CMake (MinGW-W64) as Shared Lib
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: >
            -B out2 -DCMAKE_BUILD_TYPE="Debug" -DDIRECTX_ARCH=x64 -DBUILD_XAUDIO_REDIST=ON
            -DCMAKE_CXX_COMPILER="g++.exe" -G "MinGW Makefiles"
            -DCMAKE_TOOLCHAIN_FILE="$(VCPKG_CMAKE_DIR)" -DVCPKG_MANIFEST_DIR="$(VCPKG_MANIFEST_DIR)"
            -DVCPKG_TARGET_TRIPLET=x64-mingw-static
            -DVCPKG_HOST_TRIPLET=x64-mingw-static -DDIRECTX_DXC_PATH="$(DIRECTX_DXC_DIR)"
            -DBUILD_SHARED_LIBS=ON
      - task: CMake@1
        displayName: CMake (MinGW-W64) Build as Shared Lib
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: --build out2
      - task: CMake@1
        displayName: CMake (MinGW-W64) w/ GameInput
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: >
            -B out3 -DCMAKE_BUILD_TYPE="Debug" -DDIRECTX_ARCH=x64 -DBUILD_XAUDIO_REDIST=ON -DBUILD_GAMEINPUT=ON
            -DCMAKE_CXX_COMPILER="g++.exe" -G "MinGW Makefiles"
            -DCMAKE_TOOLCHAIN_FILE="$(VCPKG_CMAKE_DIR)" -DVCPKG_MANIFEST_DIR="$(VCPKG_MANIFEST_DIR)"
            -DVCPKG_TARGET_TRIPLET=x64-mingw-static
            -DVCPKG_HOST_TRIPLET=x64-mingw-static -DDIRECTX_DXC_PATH="$(DIRECTX_DXC_DIR)"
      - task: CMake@1
        displayName: CMake (MinGW-W64) Build w/ GameInput
        inputs:
          cwd: $(Build.SourcesDirectory)
          cmakeArgs: --build out3
